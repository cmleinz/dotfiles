#+TITLE: Emacs Configuration
#+AUTHOR: Caleb Leinz
#+DATE: 2022-11-08
#+TODO: ENABLE (e) | DISABLE (d)
#+STARTUP: show2levels

* Package Setup
** ENABLE Profiling
Enable emacs configuration profiling on startup. Helps to show the impact in terms of
load time caused by packages
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold (* 50 1000 1000))
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+END_SRC
** ENABLE MELPA Configuration
#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
   (package-refresh-contents))
#+END_SRC 
** ENABLE Use-package Setup
~use-package~ is used heavily throughout the configuration, we we need to ensure it
is added to the system
#+BEGIN_SRC emacs-lisp
  (require 'use-package)

  (setq use-package-always-ensure t)
#+END_SRC
* Basic Editing
** ENABLE Evil-Mode
Evil-mode is that changes the default keybinding structure to mimic Vim-like bindings.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
#+END_SRC
*** ENABLE Collections
Evil mode doesn't support certain modes by default, particularly eshell, evil
collections adds addition support for certain major modes.
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+END_SRC
** ENABLE Save Place
Save the location you were last at when you visited that file and place the point at
that location when loading again
#+BEGIN_SRC emacs-lisp
  (save-place-mode 1)
#+END_SRC
** ENABLE Relative Line Numbers
#+BEGIN_SRC emacs-lisp
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode 1)
#+END_SRC
** ENABLE Set Scroll Offset
#+BEGIN_SRC emacs-lisp
  (setq scroll-step 1)
  (setq scroll-margin 5)
#+END_SRC
** ENABLE Centralized Backup Location
By default Emacs saves auto-save and backup files in the same directory as the source
files. This can clutter the area and often results in accidently writing temporary
files to a git repository. So we store the backups in a central location instead.
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+END_SRC
* Basic Functionality
** ENABLE Autoinsert
Certain files, namely org and latex files tend to have some initial set of boilerplate
associated with them. Autoinsert allows us to define a block of text to be automatically
inserted when creating new files of a given extension.
#+BEGIN_SRC emacs-lisp
  (defun autoinsert-yas-expand()
    "Replace text in yasnippet template."
    (evil-insert-state)
    (yas-expand-snippet (buffer-string) (point-min) (point-max)))

  (use-package autoinsert
    :init
    (setq auto-insert-query nil)
    (setq auto-insert-directory (locate-user-emacs-file "templates"))
    (add-hook 'find-file-hook 'auto-insert)
    (auto-insert-mode 1)

    :config
    (define-auto-insert "\\.org$" [ "default-org.org" autoinsert-yas-expand ])
    )
#+END_SRC
** ENABLE Swiper
Swiper is a powerful search tool which conducts fuzzy search within the file
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper))
#+END_SRC
** ENABLE Counsel
Counsel is a package which replaces some basic functions within Emacs with ones that
provide additional functionality
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :bind (
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))
#+END_SRC
** ENABLE Ivy
Ivy is a fantasic autocompletion framework, with lots of integrations.
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish
    :bind (
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)	
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))
#+END_SRC
** ENABLE Modeline
The modeline provides lots of useful information pertaining to the current buffer(s).
Things like the major-mode, file-location, evil-mode state, etc. The doom-modeline is
my personal favorite.
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom (
             (doom-modeline-height 15)
             (doom-modeline-lsp t)
             (doom-modeline-minor-modes t)
             ))
#+END_SRC
*** ENABLE Minions
Within the modeline we use minions to be able to view all minor modes used in a buffer.
#+BEGIN_SRC emacs-lisp
  (use-package minions
    :hook (doom-modeline-mode . minions-mode))
#+END_SRC
** ENABLE Which Key
Which key is a fantastic package for providing information on possible key-combinations
depending on the preceeding key combination.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (setq which-key-idle-delay 0.1)
    (which-key-mode))
#+END_SRC
** ENABLE PDF Support
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :magic ("%PDF" . pdf-view-mode))
#+END_SRC
** ENABLE Org-mode
Below are the configurations for using org-mode 
#+BEGIN_SRC emacs-lisp
  (defun cl/org-mode-setup ()
    (visual-line-mode 1)
    (flyspell-mode 1))

  (use-package org
    :hook (org-mode . cl/org-mode-setup)
    :config

    (use-package evil-org
        :ensure t
        :after (evil org)
        :config
        (add-hook 'org-mode-hook 'evil-org-mode)
        (add-hook 'evil-org-mode-hook
              (lambda ()
              (evil-org-set-key-theme '(navigation insert textobjects additional calendar todo))))
        (require 'evil-org-agenda)
        (evil-org-agenda-set-keys))

    (use-package org-bullets
      :after org
      :hook (org-mode . org-bullets-mode))
  
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-startup-indented t)
    ;; Set Org-Mode TODO keywords
    (setq org-todo-keywords
          '((sequence "TODO(t)" "PROG(p)" "PROJ(j)" "SENT(s)" "|" "DONE(d)" "CANC(c)" "PASS(a)")))
    ;; Set Org-Mode TODO state colors
    (setq org-todo-keyword-faces
          '(("TODO" . "#ff5555") ("PROG" . "#ffb86c") ("PROJ" . "#8be9fd") ("SENT" . "#ff79c6")
            ("DONE" . "#50fa7b") ("CANC" . "#a4fcba") ("PASS" . "#44475a")))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers))
#+END_SRC
*** ENABLE Org-transclusion
Org transclusion allows for .org files to contain windows into other files which are
kept up to date with the current state of those files.
#+BEGIN_SRC emacs-lisp
  (use-package org-transclusion
    :after org)
#+END_SRC
* Keybindings
Below are the list of keybindings for the configuration, certain package-specific keybindings
are configured in their respective use-package blocks, but most keybindings are handled here.
#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-evil-setup t)
    (general-override-mode)
    (general-define-key
     :states '(normal visual insert emacs)
     :keymaps 'override
     :prefix "SPC"
     :non-normal-prefix "C-SPC"
      "o"  '(:ignore t :which-key "Org")
      "p"  '(projectile-command-map :which-key "Project")
      "x"  '(execute-extended-command :which-key "M-x")

      "b"  '(:ignore t :which-key "Buffers")
      "bb" '(counsel-switch-buffer :which-key "Switch buffer")
      "bl" '(evil-next-buffer :which-key "Next buffer")
      "bh" '(evil-prev-buffer :which-key "Next buffer")
      "bk" '(kill-buffer :which-key "Kill buffer")

      "f"  '(:ignore t :which-key "Files")
      "fs" '(save-buffer :which-key "save-buffer")
      "ff" '(counsel-find-file :which-key "counsel-find-file")
      "fr" '(counsel-recentf :which-key "counsel-recentf")

      "w"  '(:ignore t :which-key "Windows")
      "ws" '(evil-window-new :which-key "Split window horizontally")
      "wv" '(evil-window-vnew :which-key "Split window vertically")
      "wd" '(evil-window-delete :which-key "Delete window")
      "wo" '(delete-other-windows :which-key "Delete other window")
      "wj" '(evil-window-down :which-key "Switch to window down")
      "wk" '(evil-window-up :which-key "Switch to window up")
      "wh" '(evil-window-left :which-key "Switch to window left")
      "wl" '(evil-window-right :which-key "Switch to window right")
      "wJ" '(evil-window-move-very-bottom :which-key "Move window down")
      "wK" '(evil-window-move-very-top :which-key "Move window up")
      "wH" '(evil-window-move-far-left :which-key "Move window left")
      "wL" '(evil-window-move-far-right :which-key "Move window right")

      "l"  '(:ignore t :which-key "LSP")
      "lf" '(lsp-ui-peek-find-definitions :which-key "Show function definition")
      "le" '(flycheck-list-errors :which-key "List Errors")
      "lk" '(lsp-ui-doc-toggle :which-key "Show item docs")
      "lc" '(:ignore t :which-key "Code")
      "lw" '(:ignore t :which-key "Workspace")
      "lwr" '(lsp-workspace-restart :which-key "Restart workspace")
      "lcp" '(check-parens :which-key "Check parenthesis errors")
      "lca" '(lsp-execute-code-action :which-key "Perform code actions") 
      "lr" '(lsp-rename :which-key "Rename")

      "h"  '(:ignore t :which-key "Helper")
      "ht" '(counsel-load-theme :which-key "Load theme")

      "g"  '(:ignore t :which-key "Magit")
      "gg" '(magit-status :which-key "magit-status")
      "gf" '(magit-fetch :which-key "magit-fetch") 
      "gF" '(magit-fetch-all :which-key "magit-fetch-all") 
      "gb" '(magit-branch :which-key "magit-branch")
      "gp" '(magit-push-to-remote :which-key "magit-push")
      "gs" '(magit-stage-modified :which-key "magit-stage-modified")
      "gc" '(magit-commit :which-key "magit-commit")

      "r"  '(:ignore t :which-key "Configuration changes")
      "rr" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :which-key "Reload init.el")
      "re" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :which-key "Open init.el")

      "oy" '(org-store-link :which-key "org-store-link")

      "e"  '(eshell :which-key "Eshell")
      "x"  '(counsel-M-x :which-key "M-x")
      "/"  '(evilnc-comment-or-uncomment-lines :which-key "Un/Comment lines")
     )

    ;; Org-mode specific bindings
    (general-define-key
     :states '(normal visual emacs)
     :keymaps '(org-mode-map)
     :prefix "SPC"
     "of" '(org-open-at-point :which-key "org-open-at-point")
     "oi" '(org-insert-link :which-key "org-insert-link")
     )

    ;; Rust specific bindings
    (general-define-key
     :states '(normal visual emacs)
     :keymaps '(rustic-mode-map)
     :prefix "SPC"
     "cr" '(rustic-cargo-run :which-key "cargo run")
     "cb" '(rustic-cargo-build-arguments '("--release") :which-key "cargo build --release")
     "cc" '(rustic-cargo-build :which-key "cargo build")
     "cd" '(rustic-cargo-build-doc :which-key "cargo doc")
     "ch" '(lsp-rust-analyzer-inlay-hints-mode :which-key "toggle-inlay-hints") 
     )
  )
#+END_SRC

* Development Configurations
** DISABLE Centaur Tabs
Centaur tabs provide a clean way of displaying "tabs" at the top of the screen similar
to more modern editors. These mostly act as links to other buffers. I don't use
centaur tabs as I find it to usually waste realestate.
#+BEGIN_SRC emacs-lisp
  (use-package centaur-tabs
    :config
    (setq centaur-tabs-set-icons t
          centaur-tabs-show-navigation-buttons t
          centaur-tabs-height 32
          centaur-tabs-set-modified-marker t)
    (centaur-tabs-change-fonts "Fira Code Retina" 120))
#+END_SRC
** ENABLE Company
Company provides code completion, finding function definitions, variable name,
etc.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure
    :custom
    (company-idle-delay 0.0) ;; how long to wait until popup
    ;; (company-begin-commands nil) ;; uncomment to disable popup
    :hook (prog-mode . company-mode)
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection)
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous)
          ("M-<" . company-select-first)
          ("M->" . company-select-last))
    :config
    (use-package company-jedi)
  )
#+END_SRC
** ENABLE Fill Column Mode
Fill column mode displays a vertical line at a particular column for the file. This
is useful for ensuring code confines to standards.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
  (setq-default fill-column 90)
#+END_SRC
** ENABLE Flycheck
On the fly syntax checker
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+END_SRC
** ENABLE Highlight Matching Parens
Placing your cursor on a parenthesis will highlight the matching parenthesis
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))
#+END_SRC
** ENABLE Highlight git Diffs
When editing a file within a git repository, changes to the file will be displayed
by various colors in the left gutter. Useful for seeing which changes are yet to
be committed from within the files.
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :config
    (diff-hl-dired-mode t)
    (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
    :hook (prog-mode . diff-hl-mode))
#+END_SRC
** ENABLE LSP
LSP is likely the most important feature of this configuration. LSP configuration within
Emacs is very powerful and being able to code with LSP support immediately elevates
Emacs to the level of other IDEs.
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure
    :commands lsp
    :custom
    ;; what to use when checking on-save. "check" is default, I prefer clippy
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    ;;(lsp-eldoc-render-all t)
    (lsp-idle-delay 0.5)
    (lsp-rust-analyzer-server-display-inlay-hints t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
    (lsp-rust-analyzer-display-chaining-hints t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names t)
    (lsp-rust-analyzer-display-closure-return-type-hints t)
    (lsp-rust-analyzer-display-parameter-hints t)
    (lsp-rust-analyzer-display-reborrow-hints nil)
    :config
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))
#+END_SRC
*** ENABLE LSP UI
LSP UI allows for things like peeking references and documentation without leaving
the current file.
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :ensure
    :commands lsp-ui-mode
    :custom
    (lsp-ui-peek-always-show t)
    ;; When peeking definitions it will look for them with lsp-peek, nice!
    (lsp-ui-peek-enable t)
    ;; I might remove this option, it's quite messy/distracting
    (lsp-ui-sideline-show-hover nil)
    (lsp-ui-sideline-show-diagnostics t)
    (lsp-ui-sideline--push-info nil)
    ;; Read docs with hover
    (lsp-ui-doc-enable t)
    ;; (lsp-ui-doc-delay 2)
    ;; (lsp-ui-doc-show-with-cursor t)
    (lsp-ui-doc-position 'at-point)
    ;; Show file directory when peeking definitions
    (lsp-ui-peek-show-directory t)
    ;; (define-key lsp-ui-doc-frame-mode-map (kbd "ESC") 'lsp-ui-doc-hide)
    :bind
    (:map lsp-mode-map
          ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
          ([remap xref-find-references] . lsp-ui-peek-find-references)))
#+END_SRC
*** ENABLE LSP Ivy
Use Ivy for LSP completion
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+END_SRC
** ENABLE Magit
Magit is a world-class git frontend. It is one of the best git clients full stop.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :init
    (message "Loading Magit!")
    :config
    (message "Loaded Magit!"))
#+END_SRC
** ENABLE Nerd Commenter
Provides a fast way of commenting single lines, or blocks of code.
#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+END_SRC
** ENABLE Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode))
#+END_SRC
** ENABLE Rainbow Delimiters
Rainbow delimiters make it much easier to tell which parentheses and brackets are
associated with one another
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode)
    (toml-mode . rainbow-delimiters-mode))
#+END_SRC
** ENABLE Rainbow Mode
Rainbow mode highlights certain color keywords with the appropriate color they represent.
This is useful for certain file types in which colors are commonly defined such as CSS,
HTML, LaTeX, etc.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :hook ((css-mode-hook . rainbow-mode)
           (html-mode-hook . rainbow-mode)
           (latex-mode-hook . rainbow-mode)
           (scss-mode-hook . rainbow-mode)))
#+END_SRC
** ENABLE Smart Parenthesis
Smart parenthesis automatically add the associated closing parenthesis (and brackets).
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :hook (prog-mode . smartparens-mode)
          (toml-mode . smartparens-mode))
#+END_SRC
** ENABLE Snippets
Snippets are a powerful tool for speeding up the insertion of certain boilerplate code
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure
    :config
    (setq yas-snippet-dirs
          '("~/.config/emacs/snippets/"))
    (yas-reload-all)
    (yas-global-mode)
    (add-hook 'prog-mode-hook 'yas-minor-mode)
    (add-hook 'text-mode-hook 'yas-minor-mode)
    (use-package yasnippet-snippets))
#+END_SRC
** ENABLE Tree Sitter
Tree sitter is a parser for source files which aims to be faster, more robust, and more
feature rich than typical regex parsing. So far it's been amazing.
#+BEGIN_SRC emacs-lisp
  (use-package tree-sitter
    :config
    (use-package tree-sitter-langs)
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+END_SRC
** ENABLE Vterm
[[https://github.com/akermu/emacs-libvterm][vterm]] is a major mode which adds full fledged terminal support for emacs, including
support for different shells like fish, and support for terminal modelines like starship.
#+BEGIN_SRC emacs-lisp
  (use-package vterm)
#+END_SRC
* Development Configurations - Language Specific
** ENABLE Python
*** ENABLE Elpy Framework
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :init (add-hook 'python-mode-hook #'elpy-enable)
    :config
    (setq elpy-rpc-python-command "python3")
    (setq python-shell-interpreter "python3")
    (add-hook 'elpy-mode-hook 'lsp))
#+END_SRC
*** ENABLE Black Formatting
Format python files on save based on the black standard
#+BEGIN_SRC emacs-lisp
  (use-package blacken
    :init (add-hook 'elpy-mode-hook 'blacken-mode))
#+END_SRC
** ENABLE Rust
LSP handled via rust-analyzer, autoformat on save, ensure tree-sitter mode
#+BEGIN_SRC emacs-lisp
  (defun cl/rustic-mode-hook ()
    (when buffer-file-name
      (setq-local buffer-save-without-query t)))
  
  (use-package rustic
    :ensure
    :bind (:map rustic-mode-map
                ("M-j" . lsp-ui-imenu)
                ("M-?" . lsp-find-references)
                ("C-c C-c l" . flycheck-list-errors)
                ("C-c C-c a" . lsp-execute-code-action)
                ("C-c C-c r" . lsp-rename)
                ("C-c C-c q" . lsp-workspace-restart)
                ("C-c C-c Q" . lsp-workspace-shutdown)
                ("C-c C-c s" . lsp-rust-analyzer-status))
    :config
    (setq rustic-format-on-save t)
    (setq rustic-format-display-method 'ignore)
    (add-hook 'rustic-mode-hook 'cl/rustic-mode-hook)
    (add-hook 'rust-mode-hook #'tree-sitter-mode)
    (setq lsp-rust-analyzer-server-command '("~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rust-analyzer")))
#+END_SRC
** ENABLE C/C++
Configure C/C++ editing to use clangd as the debugger.
#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :config
    (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
    (add-hook 'c-mode-hook 'eglot-ensure)
    (add-hook 'c++-mode-hook 'eglot-ensure))
#+END_SRC
* Look and Feel
** ENABLE Font
Set the font to FiraCode
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "Fira Code Retina" :height 110)
#+END_SRC
*** ENABLE Ligatures
Enable FiraCode ligatures when in programming buffers. Also disable certain
patterns which are distracting
#+BEGIN_SRC emacs-lisp
  (use-package fira-code-mode
    :custom (fira-code-mode-disabled-ligatures '("x", ":"))
    :hook prog-mode)                                         
#+END_SRC
** ENABLE Minimal Setup
*** ENABLE Block startup message
By default Emacs loads with a startup message that can be useful when starting
out but is not necessary for most users
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
*** ENABLE Disable Menu Bar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
#+END_SRC
*** ENABLE Disable Tool Bar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC
*** ENABLE Disable Scroll Bar
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1) ; Disable scrollbar
#+END_SRC
** ENABLE ThemeBy default the theme used is the booberry theme, however I've also included the
doom-emacs themes since they are extremely high quality
*** ENABLE Autothemer
#+BEGIN_SRC emacs-lisp
  (use-package autothemer
    :ensure t)
#+END_SRC
*** ENABLE Booberry Theme
Booberry is an emacs port of the Helix theme of the same name
#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.config/emacs/booberry-theme/")
  (load-theme 'booberry t)
#+END_SRC
*** DISABLE Doom Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC


